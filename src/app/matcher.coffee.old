
module.exports = 
  subscribe: (store) ->
    store.afterDb 'push', 'bids.*', (txn, bids, previousDoc, done) ->
      console.log txn
      path = txn[3][0]
      type = if path.charAt(path.length-1)=='y' then 'buy' else 'sell'
      newBid.type = type
      newBid = txn[3][1]
      #bids = match store, bids, newBid
      #storeBids store, newBid.stock, bids
      done()

match = (store, bids, bid) ->
  bids = toMatcherStructure bids
  {sell, buy} = findMatch bids, bid
  #execute sell, buy
  #updateBid bids, bid for bid in [sell, buy]
  toStoreStructure bids

execute = (sell, buy) ->
  amount = min sell.bid.amount, buy.bid.amount
  sell.bid.amount -= amount
  buy.bid.amount -= amount

storeBids = (store, stock, bids) ->
  store.set 'bids.'+stock, bids

findMatch = (bids, bid) ->
  bidsArr = if bid.type == 'buy' then bids.sell else bids.buy
  logMatch bid, aBid for aBid in bidsArr
  sell: 'lll'
  buy: 'sss'

logMatch = (bid, aBid) ->
  console.log bid
  console.log aBid
  console.log (if doesMatch bid, aBid then 'Match!' else 'No match') if bid.type == 'sell'
  console.log (if doesMatch abid, bid then 'Match!' else 'No match') if bid.type == 'buy'

#assumes same stock
doesMatch = (sell, buy) ->
  buy.price > sell.price

updateBid = (bids, bid) ->
  bidsArr = if bid.bid.type == 'buy' then bids.buy else bids.sell
  bidsArr.splice(bid.ptr, 1) if bid.bid.amount == 0

# for now we don't change the structure
toStoreStructure = (bids) ->
  bids
toMatcherStructure = toStoreStructure

min = (a,b) ->
  if a<=b then a else b

